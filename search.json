[{"path":"http://liu-chao.site/conversim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"http://liu-chao.site/conversim/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyzing Similarities between Two Long Speeches","text":"vignette demonstrates usage various similarity functions analyzing speeches. ’ll using example data speeches_data stored inst/extdata showcase functions. First, let’s load example data:","code":"data_path <- system.file(\"extdata\", \"speeches_data.Rdata\", package = \"conversim\") load(data_path)  # Print a summary of the speeches data print(summary(speeches_data)) ##   speaker_id            text           ##  Length:2           Length:2           ##  Class :character   Class :character   ##  Mode  :character   Mode  :character"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"preprocessing-text","dir":"Articles","previous_headings":"Introduction","what":"Preprocessing Text","title":"Analyzing Similarities between Two Long Speeches","text":"begin similarity functions, let’s look preprocess_text function:","code":"# Example usage with our data original_text <- substr(speeches_data$text[1], 1, 200)  # First 200 characters of speech A preprocessed_text <- preprocess_text(original_text) print(paste(\"Original:\", original_text)) ## [1] \"Original: Ladies and Gentlemen, Distinguished Guests,\\n\\nToday, I stand before you to address one of the most pressing challenges of our time—climate change. What was once a distant concern is now an undeniable r\" print(paste(\"Preprocessed:\", preprocessed_text)) ## [1] \"Preprocessed: ladies and gentlemen distinguished guests today i stand before you to address one of the most pressing challenges of our timeclimate change what was once a distant concern is now an undeniable r\""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"topic-similarity","dir":"Articles","previous_headings":"Introduction","what":"Topic Similarity","title":"Analyzing Similarities between Two Long Speeches","text":"topic_similarity function calculates similarity two speeches based topics: Note: difference LDA (Latent Dirichlet Allocation) topic similarity (0.1694) LSA (Latent Semantic Analysis) topic similarity (1) can attributed several factors:","code":"# Example usage with our speeches data lda_similarity <- topic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"lda\", num_topics = 5) lsa_similarity <- topic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"lsa\", num_topics = 5)  print(paste(\"LDA Similarity:\", lda_similarity)) ## [1] \"LDA Similarity: 0.169419269706043\" print(paste(\"LSA Similarity:\", lsa_similarity)) ## [1] \"LSA Similarity: 1\""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"different-algorithms","dir":"Articles","previous_headings":"Introduction > Topic Similarity","what":"1. Different Algorithms","title":"Analyzing Similarities between Two Long Speeches","text":"LDA LSA use fundamentally different approaches topic modeling semantic analysis: LDA probabilistic model assumes documents mixtures topics, topics mixtures words. aims reverse-engineer underlying topic structure generated observed documents. LSA, contrast, relies singular value decomposition (SVD) term-document matrix, reducing dimensionality uncover latent semantic structures.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"possible-reasons-for-lsas-high-similarity-score","dir":"Articles","previous_headings":"Introduction > Topic Similarity","what":"2. Possible Reasons for LSA’s High Similarity Score","title":"Analyzing Similarities between Two Long Speeches","text":"Dimensionality: topics (dimensions) chosen LSA, semantic space might oversimplified, leading artificially high similarity score. Corpus Size: LSA can sensitive size corpus. two documents, may enough data LSA create meaningful semantic space. Common Vocabulary: speeches discuss climate change, use similar high-level vocabulary lead LSA treat highly similar, especially small corpus. Implementation Issue: problem cosine similarity calculated normalized LSA implementation.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"sensitivity-to-input-parameters","dir":"Articles","previous_headings":"Introduction > Topic Similarity","what":"3. Sensitivity to Input Parameters","title":"Analyzing Similarities between Two Long Speeches","text":"LDA LSA sensitive input parameters, especially number topics chosen. code used five topics methods, may appropriate LDA LSA particular case.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"nature-of-the-data","dir":"Articles","previous_headings":"Introduction > Topic Similarity","what":"4. Nature of the Data","title":"Analyzing Similarities between Two Long Speeches","text":"Although speeches climate change, focus different aspects topic. LDA might better suited capture nuanced differences topic distribution, whereas LSA may oversimplify analysis due shared overall theme vocabulary.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"lexical-similarity","dir":"Articles","previous_headings":"Introduction","what":"Lexical Similarity","title":"Analyzing Similarities between Two Long Speeches","text":"lexical_similarity function calculates similarity two speeches based shared unique words:","code":"# Example usage with our speeches data lex_similarity <- lexical_similarity(speeches_data$text[1], speeches_data$text[2]) print(paste(\"Lexical Similarity:\", lex_similarity)) ## [1] \"Lexical Similarity: 0.15180265654649\""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"semantic-similarity","dir":"Articles","previous_headings":"Introduction","what":"Semantic Similarity","title":"Analyzing Similarities between Two Long Speeches","text":"semantic_similarity function calculates semantic similarity two speeches using different methods:","code":"# Example usage with our speeches data tfidf_similarity <- semantic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"tfidf\") word2vec_similarity <- semantic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"word2vec\")  print(paste(\"TF-IDF Similarity:\", tfidf_similarity)) ## [1] \"TF-IDF Similarity: 0.5\" print(paste(\"Word2Vec Similarity:\", word2vec_similarity)) ## [1] \"Word2Vec Similarity: 0.999170634893728\" # Note: For GloVe method, you need to provide a path to pre-trained GloVe vectors # glove_similarity <- semantic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"glove\", model_path = \"path/to/glove/vectors.txt\")"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"structural-similarity","dir":"Articles","previous_headings":"Introduction","what":"Structural Similarity","title":"Analyzing Similarities between Two Long Speeches","text":"structural_similarity function calculates similarity two speeches based structure:","code":"# Example usage with our speeches data struct_similarity <- structural_similarity(strsplit(speeches_data$text[1], \"\\n\")[[1]],                                             strsplit(speeches_data$text[2], \"\\n\")[[1]]) print(paste(\"Structural Similarity:\", struct_similarity)) ## [1] \"Structural Similarity: 0.889420039965884\""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"stylistic-similarity","dir":"Articles","previous_headings":"Introduction","what":"Stylistic Similarity","title":"Analyzing Similarities between Two Long Speeches","text":"stylistic_similarity function calculates various stylistic features similarity two speeches:","code":"# Example usage with our speeches data style_similarity <- stylistic_similarity(speeches_data$text[1], speeches_data$text[2]) print(\"Stylistic Similarity Results:\") ## [1] \"Stylistic Similarity Results:\" print(style_similarity) ## $text1_features ##                 ttr avg_sentence_length            fk_grade  ##            0.644186           23.888889           19.878760  ##  ## $text2_features ##                 ttr avg_sentence_length            fk_grade  ##           0.5490849          23.1153846          17.0446339  ##  ## $feature_differences ##                 ttr avg_sentence_length            fk_grade  ##          0.09510119          0.77350427          2.83412575  ##  ## $overall_similarity ## [1] 0.8924734 ##  ## $cosine_similarity ## [1] 0.9949162"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"sentiment-similarity","dir":"Articles","previous_headings":"Introduction","what":"Sentiment Similarity","title":"Analyzing Similarities between Two Long Speeches","text":"sentiment_similarity function calculates sentiment similarity two speeches:","code":"# Example usage with our speeches data sent_similarity <- sentiment_similarity(speeches_data$text[1], speeches_data$text[2]) print(paste(\"Sentiment Similarity:\", sent_similarity)) ## [1] \"Sentiment Similarity: 0.952602694643716\""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_between_Two_Long_Speeches.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Analyzing Similarities between Two Long Speeches","text":"vignette demonstrated usage various similarity functions analyzing speeches using provided speeches_data.Rdata. functions can used individually combined create comprehensive similarity analysis different speeches dataset.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"vignette demonstrates use conversation similarity sequence functions provided package. functions allow analyze various aspects similarity conversations time, including topic, lexical, semantic, stylistic, sentiment similarities.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"First, let’s load necessary libraries:","code":"library(ggplot2) library(tm) library(conversim)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"sample-data","dir":"Articles","previous_headings":"","what":"Sample Data","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"Let’s create sample conversation dataset work :","code":"set.seed(123) conversation <- data.frame(   speaker = rep(c(\"A\", \"B\"), 10),   processed_text = c(     \"Hello how are you today\",     \"I'm doing well thanks for asking\",     \"That's great to hear what are your plans\",     \"I'm planning to go for a walk later\",     \"Sounds nice the weather is beautiful\",     \"Yes it's perfect for outdoor activities\",     \"Do you often go for walks\",     \"Yes I try to walk every day for exercise\",     \"That's a great habit to have\",     \"Thanks I find it helps me stay healthy\",     \"Have you tried other forms of exercise\",     \"I also enjoy swimming and yoga\",     \"Those are excellent choices too\",     \"What about you what exercise do you prefer\",     \"I like running and playing tennis\",     \"Tennis is fun do you play often\",     \"I try to play at least once a week\",     \"That's a good frequency to maintain\",     \"Yes it keeps me active and social\",     \"Social aspects of exercise are important too\"   ) )"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"topic-similarity-sequence","dir":"Articles","previous_headings":"","what":"Topic Similarity Sequence","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"Let’s start analyzing topic similarity sequence:","code":"topic_sim <- topic_sim_seq(conversation, method = \"lda\", num_topics = 2, window_size = 3)  # Plot the topic similarity sequence ggplot(data.frame(Segment = 1:3, Similarity = topic_sim$sequence), aes(x = Segment, y = Similarity)) +   geom_line() +   geom_point() +   labs(title = \"Topic Similarity Sequence\", x = \"Conversation Segment\", y = \"Similarity Score\") +   theme_minimal() # Print the average topic similarity cat(\"Average topic similarity:\", round(topic_sim$average, 3)) #> Average topic similarity: 0.784"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"lexical-similarity-sequence","dir":"Articles","previous_headings":"","what":"Lexical Similarity Sequence","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"Next, let’s look lexical similarity sequence:","code":"lexical_sim <- lex_sim_seq(conversation, window_size = 3)  # Plot the lexical similarity sequence ggplot(data.frame(Exchange = 1:length(lexical_sim$sequence), Similarity = lexical_sim$sequence),         aes(x = Exchange, y = Similarity)) +   geom_line() +   geom_point() +   labs(title = \"Lexical Similarity Sequence\", x = \"Conversation Exchange\", y = \"Similarity Score\") +   theme_minimal() # Print the average lexical similarity cat(\"Average lexical similarity:\", round(lexical_sim$average, 3)) #> Average lexical similarity: 0.557"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"semantic-similarity-sequence","dir":"Articles","previous_headings":"","what":"Semantic Similarity Sequence","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"Now, let’s analyze semantic similarity sequence:","code":"semantic_sim <- sem_sim_seq(conversation, method = \"tfidf\", window_size = 3)  # Plot the semantic similarity sequence ggplot(data.frame(Exchange = 1:length(semantic_sim$sequence), Similarity = semantic_sim$sequence),         aes(x = Exchange, y = Similarity)) +   geom_line() +   geom_point() +   labs(title = \"Semantic Similarity Sequence\", x = \"Conversation Exchange\", y = \"Similarity Score\") +   theme_minimal() # Print the average semantic similarity cat(\"Average semantic similarity:\", round(semantic_sim$average, 3)) #> Average semantic similarity: 0.5"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"stylistic-similarity-sequence","dir":"Articles","previous_headings":"","what":"Stylistic Similarity Sequence","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"Let’s examine stylistic similarity sequence:","code":"stylistic_sim <- style_sim_seq(conversation, window_size = 3)  # Plot the stylistic similarity sequence ggplot(data.frame(Exchange = 1:length(stylistic_sim$sequence), Similarity = stylistic_sim$sequence),         aes(x = Exchange, y = Similarity)) +   geom_line() +   geom_point() +   labs(title = \"Stylistic Similarity Sequence\", x = \"Conversation Exchange\", y = \"Similarity Score\") +   theme_minimal() # Print the average stylistic similarity cat(\"Average stylistic similarity:\", round(stylistic_sim$average, 3)) #> Average stylistic similarity: 0.917"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"sentiment-similarity-sequence","dir":"Articles","previous_headings":"","what":"Sentiment Similarity Sequence","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"Finally, let’s analyze sentiment similarity sequence:","code":"sentiment_sim <- sent_sim_seq(conversation, window_size = 3)  # Plot the sentiment similarity sequence ggplot(data.frame(Exchange = 1:length(sentiment_sim$sequence), Similarity = sentiment_sim$sequence),         aes(x = Exchange, y = Similarity)) +   geom_line() +   geom_point() +   labs(title = \"Sentiment Similarity Sequence\", x = \"Conversation Exchange\", y = \"Similarity Score\") +   theme_minimal() # Print the average sentiment similarity cat(\"Average sentiment similarity:\", round(sentiment_sim$average, 3)) #> Average sentiment similarity: 0.94"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequence_in_One_Dyad.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Analyzing Similarities in Conversational Sequence in One Dyad","text":"vignette demonstrates use various functions analyze different aspects similarity conversations. examining topic, lexical, semantic, stylistic, sentiment similarities, researchers can gain insights dynamics conversations evolve time. tools can particularly useful fields linguistics, psychology, communication studies, understanding nuances conversation patterns crucial.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"vignette demonstrates use functions provided conversation_multidyads.R file analyze conversations across multiple dyads. functions allow preprocess conversation data calculate various similarity measures conversation participants.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"Load library:","code":"library(conversim)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"loading-the-data","dir":"Articles","previous_headings":"","what":"Loading the Data","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"’ll use provided dataset “dyad_example_data.Rdata” located inst/extdata directory package:","code":"data_path <- system.file(\"extdata\", \"dyad_example_data.Rdata\", package = \"conversim\") load(data_path)  # Display the first few rows and structure of the data head(dyad_example_data) #> # A tibble: 6 × 3 #>   dyad_id speaker_id text                                                        #>     <dbl> <chr>      <chr>                                                       #> 1       1 A          What did you think of the new movie that just came out?     #> 2       1 B          I haven’t seen it yet. Which one are you referring to?      #> 3       1 A          The latest superhero film. I heard it’s getting great revi… #> 4       1 B          Oh, that one! I’ve been meaning to watch it. Did you enjoy… #> 5       1 A          Yes, I thought it was fantastic. The special effects were … #> 6       1 B          Really? What about the storyline? I heard it’s a bit predi… str(dyad_example_data) #> tibble [532 × 3] (S3: tbl_df/tbl/data.frame) #>  $ dyad_id   : num [1:532] 1 1 1 1 1 1 1 1 1 1 ... #>  $ speaker_id: chr [1:532] \"A\" \"B\" \"A\" \"B\" ... #>  $ text      : chr [1:532] \"What did you think of the new movie that just came out?\" \"I haven’t seen it yet. Which one are you referring to?\" \"The latest superhero film. I heard it’s getting great reviews.\" \"Oh, that one! I’ve been meaning to watch it. Did you enjoy it?\" ..."},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"preprocessing","dir":"Articles","previous_headings":"","what":"Preprocessing","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"analyzing conversations, need preprocess text data:","code":"processed_convs <- preprocess_dyads(dyad_example_data) head(dyad_example_data) #> # A tibble: 6 × 3 #>   dyad_id speaker_id text                                                        #>     <dbl> <chr>      <chr>                                                       #> 1       1 A          What did you think of the new movie that just came out?     #> 2       1 B          I haven’t seen it yet. Which one are you referring to?      #> 3       1 A          The latest superhero film. I heard it’s getting great revi… #> 4       1 B          Oh, that one! I’ve been meaning to watch it. Did you enjoy… #> 5       1 A          Yes, I thought it was fantastic. The special effects were … #> 6       1 B          Really? What about the storyline? I heard it’s a bit predi…"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"calculating-similarities","dir":"Articles","previous_headings":"","what":"Calculating Similarities","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"Now, let’s calculate various similarity measures preprocessed conversations.","code":""},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"topic-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Topic Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"topic_sim <- topic_sim_dyads(processed_convs, method = \"lda\", num_topics = 5, window_size = 3)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"lexical-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Lexical Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"lexical_sim <- lexical_sim_dyads(processed_convs, window_size = 3)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"semantic-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Semantic Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"semantic_sim <- semantic_sim_dyads(processed_convs, method = \"tfidf\", window_size = 3)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"structural-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Structural Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"structural_sim <- structural_sim_dyads(processed_convs)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"stylistic-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Stylistic Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"stylistic_sim <- stylistic_sim_dyads(processed_convs, window_size = 3)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"sentiment-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Sentiment Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"sentiment_sim <- sentiment_sim_dyads(processed_convs, window_size = 3)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"participant-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Participant Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"participant_sim <- participant_sim_dyads(processed_convs)"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"timing-similarity","dir":"Articles","previous_headings":"Calculating Similarities","what":"Timing Similarity","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"","code":"timing_sim <- timing_sim_dyads(processed_convs) #> Warning in timing_sim_dyads(processed_convs): Only one observation per dyad. #> Using simple mean for overall average instead of multilevel modeling."},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"Let’s visualize results similarity analyses using ggplot2. ’s example plot topic similarity dyad:","code":"topic_sim_df <- data.frame(   dyad = rep(names(topic_sim$similarities_by_dyad),               sapply(topic_sim$similarities_by_dyad, length)),   similarity = unlist(topic_sim$similarities_by_dyad),   index = unlist(lapply(topic_sim$similarities_by_dyad, seq_along)) )  ggplot(topic_sim_df, aes(x = index, y = similarity, color = dyad)) +   geom_line() +   geom_point() +   facet_wrap(~dyad, ncol = 2) +   labs(title = \"Topic Similarity Across Dyads\",        x = \"Conversation Sequence\",        y = \"Similarity Score\") +   theme_minimal() +   theme(legend.position = \"none\")"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"comparing-different-similarity-measures","dir":"Articles","previous_headings":"","what":"Comparing Different Similarity Measures","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"can also compare different similarity measures across dyads:","code":"comparison_df <- data.frame(   dyad = names(topic_sim$similarities_by_dyad),   topic = sapply(topic_sim$similarities_by_dyad, mean),   lexical = sapply(lexical_sim$similarities_by_dyad, mean),   semantic = sapply(semantic_sim$similarities_by_dyad, mean),   structural = unlist(structural_sim$similarities_by_dyad),   stylistic = sapply(stylistic_sim$similarities_by_dyad, mean),   sentiment = sapply(sentiment_sim$similarities_by_dyad, mean),   participant = unlist(participant_sim$similarities_by_dyad),   timing = unlist(timing_sim$similarities_by_dyad) )  comparison_long <- reshape(comparison_df,                             varying = list(names(comparison_df)[names(comparison_df) != \"dyad\"]),                            v.names = \"similarity\",                            timevar = \"measure\",                            times = names(comparison_df)[names(comparison_df) != \"dyad\"],                            new.row.names = 1:10000, # Adjust this if needed                            direction = \"long\")  ggplot(comparison_long, aes(x = measure, y = similarity, fill = measure)) +   geom_boxplot() +   labs(title = \"Comparison of Similarity Measures Across Dyads\",        x = \"Similarity Measure\",        y = \"Similarity Score\") +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"},{"path":"http://liu-chao.site/conversim/articles/Analyzing_Similarities_in_Conversational_Sequences_across_Multiple_Dyads.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Analyzing Similarities in Conversational Sequences across Multiple Dyads","text":"vignette demonstrates use functions conversation_multidyads.R analyze conversations across multiple dyads using real-world data. tools allow researchers examine various aspects conversation dynamics, including topic coherence, lexical alignment, semantic similarity, . visualizations provide insights different similarity measures vary across dyads compare . can help identifying patterns trends conversational dynamics. Remember effectiveness analyses may depend size nature dataset. Always consider context conversations limitations similarity measure interpreting results. analysis, might consider: Investigating dyads particularly high low similarity scores. Examining similarity measures change course conversations. Correlating similarity measures variables interest (e.g., conversation outcomes, participant characteristics).","code":""},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Utility Functions for Further Exploration and Visualization","text":"vignette demonstrates usage utility functions speech similarity analysis. functions designed complement main similarity calculation functions provide additional tools visualization analysis.","code":""},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"combining-similarity-measures","dir":"Articles","previous_headings":"","what":"Combining Similarity Measures","title":"Utility Functions for Further Exploration and Visualization","text":"combine_sims function allows combine multiple similarity measures single score:","code":"sims <- list(topic = 0.8, lexical = 0.6, semantic = 0.7, structural = 0.9) combined_score <- combine_sims(sims) print(combined_score) #> [1] 0.75  # With custom weights weighted_score <- combine_sims(sims, weights = list(topic = 2, lexical = 1, semantic = 1.5, structural = 1)) print(weighted_score) #> [1] 0.7545455"},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"visualizing-similarity-scores","dir":"Articles","previous_headings":"","what":"Visualizing Similarity Scores","title":"Utility Functions for Further Exploration and Visualization","text":"plot_sims function creates bar plot similarity scores:","code":"sims <- list(topic = 0.8, lexical = 0.6, semantic = 0.7, structural = 0.9) plot_sims(sims)"},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"comparing-stylistic-features","dir":"Articles","previous_headings":"","what":"Comparing Stylistic Features","title":"Utility Functions for Further Exploration and Visualization","text":"compare_style function visualizes comparison stylistic features two speeches:","code":"# Simulating the result of stylistic_similarity function stylistic_result <- list(   text1_features = list(sentence_length = 15, word_length = 5, unique_words = 100),   text2_features = list(sentence_length = 12, word_length = 4, unique_words = 80),   overall_similarity = 0.85 )  compare_style(stylistic_result)"},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"generating-a-comprehensive-similarity-report","dir":"Articles","previous_headings":"","what":"Generating a Comprehensive Similarity Report","title":"Utility Functions for Further Exploration and Visualization","text":"gen_sim_report function generates comprehensive report similarity measures:","code":"speech1 <- \"This is the first speech. It talks about important topics.\" speech2 <- \"This is the second speech. It covers similar subjects.\"  # Note: This function call might not work as-is because it depends on other functions # that are not defined in the utility files. For demonstration purposes, we'll create # a mock report.  mock_report <- list(   similarities = list(     topic = 0.8,     lexical = 0.6,     semantic = 0.7,     structural = 0.9,     stylistic = 0.85,     sentiment = 0.75   ),   combined_similarity = 0.75,   similarity_plot = plot_sims(list(topic = 0.8, lexical = 0.6, semantic = 0.7, structural = 0.9)),   stylistic_plot = compare_style(stylistic_result) )  # Print the mock report print_sim_report(mock_report) #> Similarity Report #> ================= #>  #> Individual Similarity Scores: #>   topic: 0.8000 #>   lexical: 0.6000 #>   semantic: 0.7000 #>   structural: 0.9000 #>   stylistic: 0.8500 #>   sentiment: 0.7500 #>  #> Combined Similarity Score: %.4f #>  0.75 #> Plots have been generated for overall similarities and stylistic features. #> Use 'report$similarity_plot' and 'report$stylistic_plot' to view them."},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"working-with-conversation-sequences","dir":"Articles","previous_headings":"","what":"Working with Conversation Sequences","title":"Utility Functions for Further Exploration and Visualization","text":"conversation_sequence_utilities.R file provides functions analyzing similarity sequences conversations:","code":"# Combine similarity measures for a single dyad sim1 <- list(sequence = c(0.8, 0.7, 0.9), average = 0.8) sim2 <- list(sequence = c(0.6, 0.8, 0.7), average = 0.7) combined <- combine_sim_seq(list(sim1, sim2)) print(combined) #> $sequence #> [1] 0.70 0.75 0.80 #>  #> $average #> [1] 0.75  # Normalize similarity scores scores <- c(0.2, 0.5, 0.8, 1.0, 0.3) normalized <- norm_sim(scores) print(normalized) #> [1] 0.000 0.375 0.750 1.000 0.125  # Aggregate similarity sequence seq <- c(0.5, 0.6, 0.7, 0.6, 0.8, 0.7, 0.9, 0.8, 0.7, 0.8) aggregated <- agg_seq(seq, 3) print(aggregated) #> [1] 0.60 0.80 0.75  # Calculate correlation between similarity measures cor_matrix <- cor_sim_seq(list(sim1, sim2)) print(cor_matrix) #>      [,1] [,2] #> [1,]  1.0 -0.5 #> [2,] -0.5  1.0"},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"analyzing-multiple-dyads","dir":"Articles","previous_headings":"","what":"Analyzing Multiple Dyads","title":"Utility Functions for Further Exploration and Visualization","text":"conversation_multidyads_utilities.R file provides functions analyzing similarities across multiple dyads:","code":"# Create mock data for multiple dyads similarities <- list(   \"1\" = c(0.5, 0.6, 0.7),   \"2\" = c(0.4, 0.5, 0.6) )  # Plot similarity over time for multiple dyads plot_sim_time(similarities, \"Topic Similarity\", \"Similarity Score\") # Calculate summary statistics stats <- calc_sum_stats(similarities) print(stats) #>   mean  sd min max #> 1  0.6 0.1 0.5 0.7 #> 2  0.5 0.1 0.4 0.6  # Plot summary statistics plot_sum_stats(stats, \"Summary Statistics of Similarities\") # Compare multiple similarity measures topic_similarities <- list(\"1\" = c(0.5, 0.6, 0.7), \"2\" = c(0.4, 0.5, 0.6)) lexical_similarities <- list(\"1\" = c(0.6, 0.7, 0.8), \"2\" = c(0.5, 0.6, 0.7)) comparison_df <- compare_sim_meas(   list(topic_similarities, lexical_similarities),   c(\"Topic\", \"Lexical\") ) print(head(comparison_df)) #>   dyad Topic Lexical #> 1    1   0.5     0.6 #> 2    1   0.6     0.7 #> 3    1   0.7     0.8 #> 4    2   0.4     0.5 #> 5    2   0.5     0.6 #> 6    2   0.6     0.7  # Plot comparison of multiple similarity measures plot_sim_comp(comparison_df, \"Comparison of Similarity Measures\")"},{"path":"http://liu-chao.site/conversim/articles/utilities_functions.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Utility Functions for Further Exploration and Visualization","text":"vignette demonstrated usage various utility functions speech similarity analysis. functions provide powerful tools combining, visualizing, analyzing similarity measures across different aspects speech conversation dynamics.","code":""},{"path":"http://liu-chao.site/conversim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chao Liu. Author, maintainer, copyright holder.","code":""},{"path":"http://liu-chao.site/conversim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chao Liu (2024). conversim: Conversation Similarity Analysis Package. R package version 0.1.0, http://liu-chao.site/conversim/, https://github.com/chaoliu-cl/conversim.","code":"@Manual{,   title = {conversim: Conversation Similarity Analysis Package},   author = {{Chao Liu}},   year = {2024},   note = {R package version 0.1.0, http://liu-chao.site/conversim/},   url = {https://github.com/chaoliu-cl/conversim}, }"},{"path":"http://liu-chao.site/conversim/index.html","id":"conversim-","dir":"","previous_headings":"","what":"Conversation Similarity Analysis Package","title":"Conversation Similarity Analysis Package","text":"conversim package provides tools analyzing similarity conversations, focus calculating topic, lexical, semantic, stylistic, sentiment similarities. package can handle comparisons two long speeches, sequence conversations one multiple dyads. utility functions also provided allow researchers explore visualize conversational patterns.","code":""},{"path":"http://liu-chao.site/conversim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Conversation Similarity Analysis Package","text":"can install conversim CRAN:","code":"install.packages(\"conversim\")"},{"path":"http://liu-chao.site/conversim/index.html","id":"load-the-package-and-example-datasets","dir":"","previous_headings":"","what":"Load the package and example datasets","title":"Conversation Similarity Analysis Package","text":"","code":"library(conversim) load(system.file(\"extdata\", \"dyad_example_data.Rdata\", package = \"conversim\")) load(system.file(\"extdata\", \"speeches_data.RData\", package = \"conversim\"))"},{"path":"http://liu-chao.site/conversim/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"Conversation Similarity Analysis Package","text":"examples use main functions conversim package.","code":""},{"path":"http://liu-chao.site/conversim/index.html","id":"analyzing-similarities-between-two-long-speeches","dir":"","previous_headings":"Example usage","what":"Analyzing Similarities between Two Long Speeches","title":"Conversation Similarity Analysis Package","text":"","code":"# preprocess_text function preprocessed_A <- preprocess_text(speeches_data$text[1]) preprocessed_B <- preprocess_text(speeches_data$text[2])  # topic_similarity function lda_similarity <- topic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"lda\", num_topics = 5) lsa_similarity <- topic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"lsa\", num_topics = 5)  # lexical_similarity function lex_similarity <- lexical_similarity(preprocessed_A, preprocessed_B)  # semantic_similarity function tfidf_similarity <- semantic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"tfidf\") word2vec_similarity <- semantic_similarity(speeches_data$text[1], speeches_data$text[2], method = \"word2vec\")  # structural_similarity function struct_similarity <- structural_similarity(strsplit(speeches_data$text[1], \"\\n\")[[1]], strsplit(speeches_data$text[2], \"\\n\")[[1]])  # stylistic_similarity function style_similarity <- stylistic_similarity(speeches_data$text[1], speeches_data$text[2])  # sentiment_similarity function sent_similarity <- sentiment_similarity(speeches_data$text[1], speeches_data$text[2])"},{"path":"http://liu-chao.site/conversim/index.html","id":"analyzing-similarities-over-a-sequence-of-conversations-in-a-single-dyad","dir":"","previous_headings":"Example usage","what":"Analyzing Similarities over a Sequence of Conversations in a Single Dyad","title":"Conversation Similarity Analysis Package","text":"","code":"# Preprocess the conversations from multiple dyads preprocessed_data <- preprocess_dyads(dyad_example_data)  # Select one dyad for comparison conversation <- preprocessed_data %>% filter(dyad_id == 1) %>% select(speaker_id, processed_text)  # Calculate topic similarity sequence topic_sim <- topic_sim_seq(conversation, method = \"lda\", num_topics = 2, window_size = 3)  ## Lexical Similarity Sequence lexical_sim <- lex_sim_seq(conversation, window_size = 3)  ## Semantic Similarity Sequence semantic_sim <- sem_sim_seq(conversation, method = \"tfidf\", window_size = 3)  ## Stylistic Similarity Sequence stylistic_sim <- style_sim_seq(conversation, window_size = 3)  ## Sentiment Similarity Sequence sentiment_sim <- sent_sim_seq(conversation, window_size = 3)"},{"path":"http://liu-chao.site/conversim/index.html","id":"analyzing-similarities-over-a-sequence-of-conversations-across-multiple-dyads","dir":"","previous_headings":"Example usage","what":"Analyzing Similarities over a Sequence of Conversations across Multiple Dyads","title":"Conversation Similarity Analysis Package","text":"tutorials, please visit liu-chao.site/conversim","code":"# Preprocess the conversations from multiple dyads preprocessed_data <- preprocess_dyads(dyad_example_data)  # Calculate topic similarity for multiple dyads topic_sim_results <- topic_sim_dyads(preprocessed_data, method = \"lda\", num_topics = 3, window_size = 2)  # Calculate lexical similarity for multiple dyads lexical_sim_results <- lexical_sim_dyads(preprocessed_data, window_size = 2)  # Calculate semantic similarity for multiple dyads semantic_sim_results <- semantic_sim_dyads(preprocessed_data, method = \"tfidf\", window_size = 2)  # Calculate structural similarity for multiple dyads structural_sim_results <- structural_sim_dyads(preprocessed_data)  # Calculate stylistic similarity for multiple dyads stylistic_sim_results <- stylistic_sim_dyads(preprocessed_data)  # Calculate sentiment similarity for multiple dyads sentiment_sim_results <- sentiment_sim_dyads(preprocessed_data)  # Calculate participant similarity for multiple dyads participant_sim_results <- participant_sim_dyads(preprocessed_data)  # Calculate timing similarity for multiple dyads timing_sim_results <- timing_sim_dyads(preprocessed_data)"},{"path":"http://liu-chao.site/conversim/reference/agg_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Aggregate Similarity Sequence — agg_seq","title":"Aggregate Similarity Sequence — agg_seq","text":"Aggregate similarity sequence single dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/agg_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Aggregate Similarity Sequence — agg_seq","text":"","code":"agg_seq(sequence, num_segments)"},{"path":"http://liu-chao.site/conversim/reference/agg_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Aggregate Similarity Sequence — agg_seq","text":"sequence numeric vector similarity scores single dyad num_segments number segments aggregate ","code":""},{"path":"http://liu-chao.site/conversim/reference/agg_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Aggregate Similarity Sequence — agg_seq","text":"numeric vector aggregated similarity scores","code":""},{"path":"http://liu-chao.site/conversim/reference/agg_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Aggregate Similarity Sequence — agg_seq","text":"function aggregates similarity sequence specified number segments single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/agg_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Aggregate Similarity Sequence — agg_seq","text":"","code":"seq <- c(0.5, 0.6, 0.7, 0.6, 0.8, 0.7, 0.9, 0.8, 0.7, 0.8) # Aggregate the sequence into 3 segments agg_3 <- agg_seq(seq, 3) print(agg_3) #> [1] 0.60 0.80 0.75  # Aggregate the sequence into 5 segments agg_5 <- agg_seq(seq, 5) print(agg_5) #> [1] 0.55 0.65 0.75 0.85 0.75"},{"path":"http://liu-chao.site/conversim/reference/calc_sim_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate correlation between similarity measures — calc_sim_cor","title":"Calculate correlation between similarity measures — calc_sim_cor","text":"function calculates correlation different similarity measures.","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sim_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate correlation between similarity measures — calc_sim_cor","text":"","code":"calc_sim_cor(comparison_df)"},{"path":"http://liu-chao.site/conversim/reference/calc_sim_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate correlation between similarity measures — calc_sim_cor","text":"comparison_df data frame output compare_sim_meas()","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sim_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate correlation between similarity measures — calc_sim_cor","text":"correlation matrix","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sim_cor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate correlation between similarity measures — calc_sim_cor","text":"","code":"topic_similarities <- list(\"1\" = c(0.5, 0.6, 0.7), \"2\" = c(0.4, 0.5, 0.6)) lexical_similarities <- list(\"1\" = c(0.6, 0.7, 0.8), \"2\" = c(0.5, 0.6, 0.7)) comparison_df <- compare_sim_meas(   list(topic_similarities, lexical_similarities),   c(\"Topic\", \"Lexical\") ) calc_sim_cor(comparison_df) #>         Topic Lexical #> Topic       1       1 #> Lexical     1       1"},{"path":"http://liu-chao.site/conversim/reference/calc_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate similarity sequence — calc_sim_seq","title":"Calculate similarity sequence — calc_sim_seq","text":"function calculates sequence similarities consecutive windows conversation.","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate similarity sequence — calc_sim_seq","text":"","code":"calc_sim_seq(conversation, window_size, similarity_func)"},{"path":"http://liu-chao.site/conversim/reference/calc_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate similarity sequence — calc_sim_seq","text":"conversation dataframe containing conversation, column named 'processed_text'. window_size integer specifying size window. similarity_func function calculates similarity two text strings.","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate similarity sequence — calc_sim_seq","text":"list containing two elements: sequence numeric vector similarity scores consecutive windows average mean similarity scores","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate similarity sequence — calc_sim_seq","text":"","code":"conversation <- data.frame(processed_text = c(\"hello\", \"world\", \"how\", \"are\", \"you\")) result <- calc_sim_seq(conversation, 2, function(x, y) sum(x == y) / max(length(x), length(y)))"},{"path":"http://liu-chao.site/conversim/reference/calc_sum_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate summary statistics for similarities — calc_sum_stats","title":"Calculate summary statistics for similarities — calc_sum_stats","text":"function calculates summary statistics similarities multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sum_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate summary statistics for similarities — calc_sum_stats","text":"","code":"calc_sum_stats(similarities)"},{"path":"http://liu-chao.site/conversim/reference/calc_sum_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate summary statistics for similarities — calc_sum_stats","text":"similarities list similarity sequences dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sum_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate summary statistics for similarities — calc_sum_stats","text":"matrix summary statistics dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/calc_sum_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate summary statistics for similarities — calc_sum_stats","text":"","code":"similarities <- list(   \"1\" = c(0.5, 0.6, 0.7),   \"2\" = c(0.4, 0.5, 0.6) ) calc_sum_stats(similarities) #>   mean  sd min max #> 1  0.6 0.1 0.5 0.7 #> 2  0.5 0.1 0.4 0.6"},{"path":"http://liu-chao.site/conversim/reference/combine_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Similarity Measures — combine_sim_seq","title":"Combine Similarity Measures — combine_sim_seq","text":"Combine similarity measures single dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Similarity Measures — combine_sim_seq","text":"","code":"combine_sim_seq(similarities, weights = NULL)"},{"path":"http://liu-chao.site/conversim/reference/combine_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Similarity Measures — combine_sim_seq","text":"similarities list similarity measures single dyad weights numeric vector weights similarity measure (default equal weights)","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Similarity Measures — combine_sim_seq","text":"list containing combined sequence average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sim_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine Similarity Measures — combine_sim_seq","text":"function combines multiple similarity measures single overall similarity score single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Similarity Measures — combine_sim_seq","text":"","code":"sim1 <- list(sequence = c(0.8, 0.7, 0.9), average = 0.8) sim2 <- list(sequence = c(0.6, 0.8, 0.7), average = 0.7) combine_sim_seq(list(sim1, sim2)) #> $sequence #> [1] 0.70 0.75 0.80 #>  #> $average #> [1] 0.75 #>"},{"path":"http://liu-chao.site/conversim/reference/combine_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility and visualization functions for speech similarity analysis — combine_sims","title":"Utility and visualization functions for speech similarity analysis — combine_sims","text":"file contains utility functions visualization tools complement main similarity calculation functions comparing two speeches. Combine multiple similarity measures","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility and visualization functions for speech similarity analysis — combine_sims","text":"","code":"combine_sims(similarities, weights = NULL)"},{"path":"http://liu-chao.site/conversim/reference/combine_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility and visualization functions for speech similarity analysis — combine_sims","text":"similarities named list similarity scores weights named list weights similarity measure (optional)","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility and visualization functions for speech similarity analysis — combine_sims","text":"single combined similarity score","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Utility and visualization functions for speech similarity analysis — combine_sims","text":"function combines multiple similarity measures single score.","code":""},{"path":"http://liu-chao.site/conversim/reference/combine_sims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Utility and visualization functions for speech similarity analysis — combine_sims","text":"","code":"sims <- list(topic = 0.8, lexical = 0.6, semantic = 0.7, structural = 0.9) combine_sims(sims) #> [1] 0.75 combine_sims(sims, weights = list(topic = 2, lexical = 1, semantic = 1.5, structural = 1)) #> [1] 0.7545455"},{"path":"http://liu-chao.site/conversim/reference/compare_sim_meas.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare multiple similarity measures — compare_sim_meas","title":"Compare multiple similarity measures — compare_sim_meas","text":"function compares multiple similarity measures set dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/compare_sim_meas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare multiple similarity measures — compare_sim_meas","text":"","code":"compare_sim_meas(similarity_list, measure_names)"},{"path":"http://liu-chao.site/conversim/reference/compare_sim_meas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare multiple similarity measures — compare_sim_meas","text":"similarity_list list lists, inner list contains similarities dyad measure_names vector names similarity measure","code":""},{"path":"http://liu-chao.site/conversim/reference/compare_sim_meas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare multiple similarity measures — compare_sim_meas","text":"data frame similarity measures dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/compare_sim_meas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare multiple similarity measures — compare_sim_meas","text":"","code":"topic_similarities <- list(\"1\" = c(0.5, 0.6, 0.7), \"2\" = c(0.4, 0.5, 0.6)) lexical_similarities <- list(\"1\" = c(0.6, 0.7, 0.8), \"2\" = c(0.5, 0.6, 0.7)) compare_sim_meas(   list(topic_similarities, lexical_similarities),   c(\"Topic\", \"Lexical\") ) #>   dyad Topic Lexical #> 1    1   0.5     0.6 #> 2    1   0.6     0.7 #> 3    1   0.7     0.8 #> 4    2   0.4     0.5 #> 5    2   0.5     0.6 #> 6    2   0.6     0.7"},{"path":"http://liu-chao.site/conversim/reference/compare_style.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare stylistic features — compare_style","title":"Compare stylistic features — compare_style","text":"function visualizes comparison stylistic features two speeches.","code":""},{"path":"http://liu-chao.site/conversim/reference/compare_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare stylistic features — compare_style","text":"","code":"compare_style(stylistic_result)"},{"path":"http://liu-chao.site/conversim/reference/compare_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare stylistic features — compare_style","text":"stylistic_result result stylistic_similarity function","code":""},{"path":"http://liu-chao.site/conversim/reference/compare_style.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare stylistic features — compare_style","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/compare_style.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare stylistic features — compare_style","text":"","code":"text1 <- \"The quick brown fox jumps over the lazy dog. It's a sunny day.\" text2 <- \"A lazy cat sleeps on the warm windowsill. Birds chirp outside.\" result <- stylistic_similarity(text1, text2) compare_style(result)"},{"path":"http://liu-chao.site/conversim/reference/cor_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Correlation Between Similarity Measures for a Single Dyad — cor_sim_seq","title":"Calculate Correlation Between Similarity Measures for a Single Dyad — cor_sim_seq","text":"Calculate Correlation Similarity Measures Single Dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/cor_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Correlation Between Similarity Measures for a Single Dyad — cor_sim_seq","text":"","code":"cor_sim_seq(similarities, method = \"pearson\")"},{"path":"http://liu-chao.site/conversim/reference/cor_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Correlation Between Similarity Measures for a Single Dyad — cor_sim_seq","text":"similarities list similarity measures single dyad method correlation method use (default \"pearson\")","code":""},{"path":"http://liu-chao.site/conversim/reference/cor_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Correlation Between Similarity Measures for a Single Dyad — cor_sim_seq","text":"correlation matrix","code":""},{"path":"http://liu-chao.site/conversim/reference/cor_sim_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Correlation Between Similarity Measures for a Single Dyad — cor_sim_seq","text":"function calculates correlation different similarity measures single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/cor_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Correlation Between Similarity Measures for a Single Dyad — cor_sim_seq","text":"","code":"sim1 <- list(sequence = c(0.8, 0.7, 0.9), average = 0.8) sim2 <- list(sequence = c(0.6, 0.8, 0.7), average = 0.7) cor_sim_seq(list(sim1, sim2)) #>      [,1] [,2] #> [1,]  1.0 -0.5 #> [2,] -0.5  1.0"},{"path":"http://liu-chao.site/conversim/reference/create_windows.html","id":null,"dir":"Reference","previous_headings":"","what":"Create windows from a conversation — create_windows","title":"Create windows from a conversation — create_windows","text":"function creates list windows conversation dataframe.","code":""},{"path":"http://liu-chao.site/conversim/reference/create_windows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create windows from a conversation — create_windows","text":"","code":"create_windows(conversation, window_size)"},{"path":"http://liu-chao.site/conversim/reference/create_windows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create windows from a conversation — create_windows","text":"conversation dataframe containing conversation, column named 'processed_text'. window_size integer specifying size window.","code":""},{"path":"http://liu-chao.site/conversim/reference/create_windows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create windows from a conversation — create_windows","text":"list character vectors, vector represents window text.","code":""},{"path":"http://liu-chao.site/conversim/reference/create_windows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create windows from a conversation — create_windows","text":"","code":"conversation <- data.frame(processed_text = c(\"hello\", \"world\", \"how\", \"are\", \"you\")) windows <- create_windows(conversation, 3)"},{"path":"http://liu-chao.site/conversim/reference/gen_sim_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate similarity report — gen_sim_report","title":"Generate similarity report — gen_sim_report","text":"function generates comprehensive report similarity measures.","code":""},{"path":"http://liu-chao.site/conversim/reference/gen_sim_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate similarity report — gen_sim_report","text":"","code":"gen_sim_report(   speech1,   speech2,   topic_method = \"lda\",   semantic_method = \"tfidf\",   glove_path = NULL )"},{"path":"http://liu-chao.site/conversim/reference/gen_sim_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate similarity report — gen_sim_report","text":"speech1 character string representing first speech speech2 character string representing second speech topic_method Method topic similarity calculation (\"lda\" \"lsa\") semantic_method Method semantic similarity calculation (\"tfidf\", \"word2vec\", \"glove\") glove_path Path pre-trained GloVe file (using \"glove\" method)","code":""},{"path":"http://liu-chao.site/conversim/reference/gen_sim_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate similarity report — gen_sim_report","text":"list containing similarity measures visualizations","code":""},{"path":"http://liu-chao.site/conversim/reference/gen_sim_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate similarity report — gen_sim_report","text":"","code":"speech1 <- \"This is the first speech. It talks about important topics.\" speech2 <- \"This is the second speech. It covers similar subjects.\" report <- gen_sim_report(speech1, speech2)"},{"path":"http://liu-chao.site/conversim/reference/heatmap_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Similarity Heatmap — heatmap_sim","title":"Create Similarity Heatmap — heatmap_sim","text":"Create heatmap similarity measures single dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/heatmap_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Similarity Heatmap — heatmap_sim","text":"","code":"heatmap_sim(similarities, titles)"},{"path":"http://liu-chao.site/conversim/reference/heatmap_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Similarity Heatmap — heatmap_sim","text":"similarities list similarity measures single dyad titles character vector titles similarity measure","code":""},{"path":"http://liu-chao.site/conversim/reference/heatmap_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Similarity Heatmap — heatmap_sim","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/heatmap_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Similarity Heatmap — heatmap_sim","text":"function creates heatmap multiple similarity measures single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/heatmap_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Similarity Heatmap — heatmap_sim","text":"","code":"sim1 <- list(sequence = c(0.5, 0.6, 0.7, 0.6, 0.8), average = 0.64) sim2 <- list(sequence = c(0.4, 0.5, 0.6, 0.7, 0.7), average = 0.58) similarities <- list(sim1, sim2) titles <- c(\"Measure 1\", \"Measure 2\")  # Plot multiple similarity measures plot <- plot_sim_multi(similarities, titles) print(plot)"},{"path":"http://liu-chao.site/conversim/reference/lex_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate lexical similarity sequence for a single dyad — lex_sim_seq","title":"Calculate lexical similarity sequence for a single dyad — lex_sim_seq","text":"function calculates lexical similarity sequence conversation exchanges within single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/lex_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate lexical similarity sequence for a single dyad — lex_sim_seq","text":"","code":"lex_sim_seq(conversation, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/lex_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate lexical similarity sequence for a single dyad — lex_sim_seq","text":"conversation data frame representing conversation window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/lex_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate lexical similarity sequence for a single dyad — lex_sim_seq","text":"list containing sequence similarities average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/lex_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate lexical similarity sequence for a single dyad — lex_sim_seq","text":"","code":"conversation <- data.frame(   processed_text = c(\"Hello world\", \"World of programming\",                      \"Programming is fun\", \"Fun world of coding\") ) result <- lex_sim_seq(conversation, window_size = 2) print(result) #> $sequence #> [1] 0.3750000 0.4444444 #>  #> $average #> [1] 0.4097222 #>"},{"path":"http://liu-chao.site/conversim/reference/lexical_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate lexical similarity for multiple dyads — lexical_sim_dyads","title":"Calculate lexical similarity for multiple dyads — lexical_sim_dyads","text":"function calculates lexical similarity sequence conversation exchanges multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/lexical_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate lexical similarity for multiple dyads — lexical_sim_dyads","text":"","code":"lexical_sim_dyads(conversations, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/lexical_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate lexical similarity for multiple dyads — lexical_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text' window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/lexical_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate lexical similarity for multiple dyads — lexical_sim_dyads","text":"list containing sequence similarities dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/lexical_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate lexical similarity for multiple dyads — lexical_sim_dyads","text":"","code":"library(lme4) #> Loading required package: Matrix convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) lexical_sim_dyads(convs, window_size = 2) #> boundary (singular) fit: see help('isSingular') #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 0.0000000 0.1428571 0.0000000 #>  #> $similarities_by_dyad$`2` #> [1] 0.1428571 0.0000000 0.0000000 #>  #>  #> $overall_average #> (Intercept)  #>  0.04761905  #>"},{"path":"http://liu-chao.site/conversim/reference/lexical_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate lexical similarity between two conversations — lexical_similarity","title":"Calculate lexical similarity between two conversations — lexical_similarity","text":"function calculates lexical similarity two conversations based overlap unique words.","code":""},{"path":"http://liu-chao.site/conversim/reference/lexical_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate lexical similarity between two conversations — lexical_similarity","text":"","code":"lexical_similarity(conv1, conv2)"},{"path":"http://liu-chao.site/conversim/reference/lexical_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate lexical similarity between two conversations — lexical_similarity","text":"conv1 character string representing first conversation conv2 character string representing second conversation","code":""},{"path":"http://liu-chao.site/conversim/reference/lexical_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate lexical similarity between two conversations — lexical_similarity","text":"numeric value representing lexical similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/lexical_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate lexical similarity between two conversations — lexical_similarity","text":"","code":"conv1 <- \"The quick brown fox jumps over the lazy dog\" conv2 <- \"The lazy dog sleeps under the quick brown fox\" lexical_similarity(conv1, conv2) #> [1] 0.6363636"},{"path":"http://liu-chao.site/conversim/reference/norm_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalize Similarity Scores — norm_sim","title":"Normalize Similarity Scores — norm_sim","text":"Normalize similarity scores","code":""},{"path":"http://liu-chao.site/conversim/reference/norm_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalize Similarity Scores — norm_sim","text":"","code":"norm_sim(similarities)"},{"path":"http://liu-chao.site/conversim/reference/norm_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalize Similarity Scores — norm_sim","text":"similarities numeric vector similarity scores","code":""},{"path":"http://liu-chao.site/conversim/reference/norm_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalize Similarity Scores — norm_sim","text":"numeric vector normalized similarity scores","code":""},{"path":"http://liu-chao.site/conversim/reference/norm_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normalize Similarity Scores — norm_sim","text":"function normalizes similarity scores 0-1 range.","code":""},{"path":"http://liu-chao.site/conversim/reference/norm_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normalize Similarity Scores — norm_sim","text":"","code":"similarities <- c(0.2, 0.5, 0.8, 1.0, 0.3) norm_sim(similarities) #> [1] 0.000 0.375 0.750 1.000 0.125"},{"path":"http://liu-chao.site/conversim/reference/participant_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate participant similarity for multiple dyads — participant_sim_dyads","title":"Calculate participant similarity for multiple dyads — participant_sim_dyads","text":"function calculates extended measure participant similarity multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/participant_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate participant similarity for multiple dyads — participant_sim_dyads","text":"","code":"participant_sim_dyads(conversations)"},{"path":"http://liu-chao.site/conversim/reference/participant_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate participant similarity for multiple dyads — participant_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text'","code":""},{"path":"http://liu-chao.site/conversim/reference/participant_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate participant similarity for multiple dyads — participant_sim_dyads","text":"list containing participant similarity dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/participant_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate participant similarity for multiple dyads — participant_sim_dyads","text":"","code":"convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) participant_sim_dyads(convs) #> Warning: Only one observation per dyad. Using simple mean for overall average instead of multilevel modeling. #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 1 #>  #> $similarities_by_dyad$`2` #> [1] 1 #>  #>  #> $overall_average #> [1] 1 #>"},{"path":"http://liu-chao.site/conversim/reference/plot_cor_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Correlation Heatmap for a Single Dyad — plot_cor_heatmap","title":"Plot Correlation Heatmap for a Single Dyad — plot_cor_heatmap","text":"Plot Correlation Heatmap Single Dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_cor_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Correlation Heatmap for a Single Dyad — plot_cor_heatmap","text":"","code":"plot_cor_heatmap(cor_matrix, titles)"},{"path":"http://liu-chao.site/conversim/reference/plot_cor_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Correlation Heatmap for a Single Dyad — plot_cor_heatmap","text":"cor_matrix correlation matrix single dyad titles character vector titles similarity measure","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_cor_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Correlation Heatmap for a Single Dyad — plot_cor_heatmap","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_cor_heatmap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Correlation Heatmap for a Single Dyad — plot_cor_heatmap","text":"function creates heatmap correlations similarity measures single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_cor_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Correlation Heatmap for a Single Dyad — plot_cor_heatmap","text":"","code":"sim1 <- list(sequence = c(0.8, 0.7, 0.9), average = 0.8) sim2 <- list(sequence = c(0.6, 0.8, 0.7), average = 0.7) cor_matrix <- cor_sim_seq(list(sim1, sim2)) plot_cor_heatmap(cor_matrix, c(\"Topic\", \"Lexical\"))"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_comp.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot comparison of multiple similarity measures — plot_sim_comp","title":"Plot comparison of multiple similarity measures — plot_sim_comp","text":"function creates ggplot object comparing multiple similarity measures set dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_comp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot comparison of multiple similarity measures — plot_sim_comp","text":"","code":"plot_sim_comp(comparison_df, title)"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_comp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot comparison of multiple similarity measures — plot_sim_comp","text":"comparison_df data frame output compare_sim_meas() title string specifying plot title","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_comp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot comparison of multiple similarity measures — plot_sim_comp","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_comp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot comparison of multiple similarity measures — plot_sim_comp","text":"","code":"topic_similarities <- list(\"1\" = c(0.5, 0.6, 0.7), \"2\" = c(0.4, 0.5, 0.6)) lexical_similarities <- list(\"1\" = c(0.6, 0.7, 0.8), \"2\" = c(0.5, 0.6, 0.7)) comparison_df <- compare_sim_meas(   list(topic_similarities, lexical_similarities),   c(\"Topic\", \"Lexical\") ) plot_sim_comp(comparison_df, \"Comparison of Similarity Measures\")"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_cor_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot heatmap of similarity measure correlations — plot_sim_cor_heatmap","title":"Plot heatmap of similarity measure correlations — plot_sim_cor_heatmap","text":"function creates ggplot object showing heatmap correlations similarity measures.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_cor_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot heatmap of similarity measure correlations — plot_sim_cor_heatmap","text":"","code":"plot_sim_cor_heatmap(cor_matrix, title)"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_cor_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot heatmap of similarity measure correlations — plot_sim_cor_heatmap","text":"cor_matrix correlation matrix output calc_sim_cor() title string specifying plot title","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_cor_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot heatmap of similarity measure correlations — plot_sim_cor_heatmap","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_cor_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot heatmap of similarity measure correlations — plot_sim_cor_heatmap","text":"","code":"topic_similarities <- list(\"1\" = c(0.5, 0.6, 0.7), \"2\" = c(0.4, 0.5, 0.6)) lexical_similarities <- list(\"1\" = c(0.6, 0.7, 0.8), \"2\" = c(0.5, 0.6, 0.7)) comparison_df <- compare_sim_meas(   list(topic_similarities, lexical_similarities),   c(\"Topic\", \"Lexical\") ) cor_matrix <- calc_sim_cor(comparison_df) plot_sim_cor_heatmap(cor_matrix, \"Correlation of Similarity Measures\")"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_multi.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Multiple Similarity Measures — plot_sim_multi","title":"Plot Multiple Similarity Measures — plot_sim_multi","text":"Plot multiple similarity measures single dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_multi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Multiple Similarity Measures — plot_sim_multi","text":"","code":"plot_sim_multi(similarities, titles)"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_multi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Multiple Similarity Measures — plot_sim_multi","text":"similarities list similarity measures single dyad titles character vector titles similarity measure","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_multi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Multiple Similarity Measures — plot_sim_multi","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_multi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Multiple Similarity Measures — plot_sim_multi","text":"function creates faceted plot multiple similarity measures single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_multi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Multiple Similarity Measures — plot_sim_multi","text":"","code":"sim1 <- list(sequence = c(0.5, 0.6, 0.7, 0.6, 0.8), average = 0.64) sim2 <- list(sequence = c(0.4, 0.5, 0.6, 0.7, 0.7), average = 0.58) similarities <- list(sim1, sim2) titles <- c(\"Measure 1\", \"Measure 2\")  # Plot multiple similarity measures plot <- plot_sim_multi(similarities, titles) print(plot)"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Similarity Sequence — plot_sim_seq","title":"Plot Similarity Sequence — plot_sim_seq","text":"Plot similarity sequence single dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Similarity Sequence — plot_sim_seq","text":"","code":"plot_sim_seq(similarity, title)"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Similarity Sequence — plot_sim_seq","text":"similarity list containing sequence similarities average similarity title character string plot title","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Similarity Sequence — plot_sim_seq","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_seq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Similarity Sequence — plot_sim_seq","text":"function creates line plot similarity sequence single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Similarity Sequence — plot_sim_seq","text":"","code":"sim_list <- list(   sequence = c(0.5, 0.6, 0.7, 0.6, 0.8),   average = 0.64 )  # Plot the similarity sequence plot <- plot_sim_seq(sim_list, \"Dyad Similarity Sequence\") print(plot)"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_time.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot similarity over time for multiple dyads — plot_sim_time","title":"Plot similarity over time for multiple dyads — plot_sim_time","text":"function creates ggplot object showing similarity time multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot similarity over time for multiple dyads — plot_sim_time","text":"","code":"plot_sim_time(similarities, title, y_label)"},{"path":"http://liu-chao.site/conversim/reference/plot_sim_time.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot similarity over time for multiple dyads — plot_sim_time","text":"similarities list similarity sequences dyad title string specifying plot title y_label string specifying y-axis label","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_time.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot similarity over time for multiple dyads — plot_sim_time","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sim_time.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot similarity over time for multiple dyads — plot_sim_time","text":"","code":"similarities <- list(   \"1\" = c(0.5, 0.6, 0.7),   \"2\" = c(0.4, 0.5, 0.6) ) plot_sim_time(similarities, \"Topic Similarity\", \"Similarity Score\")"},{"path":"http://liu-chao.site/conversim/reference/plot_sims.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize similarity scores — plot_sims","title":"Visualize similarity scores — plot_sims","text":"function creates bar plot similarity scores.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize similarity scores — plot_sims","text":"","code":"plot_sims(similarities)"},{"path":"http://liu-chao.site/conversim/reference/plot_sims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize similarity scores — plot_sims","text":"similarities named list similarity scores","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualize similarity scores — plot_sims","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualize similarity scores — plot_sims","text":"","code":"sims <- list(topic = 0.8, lexical = 0.6, semantic = 0.7, structural = 0.9) plot_sims(sims)"},{"path":"http://liu-chao.site/conversim/reference/plot_sum_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summary statistics for similarities — plot_sum_stats","title":"Plot summary statistics for similarities — plot_sum_stats","text":"function creates ggplot object showing summary statistics similarities multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sum_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summary statistics for similarities — plot_sum_stats","text":"","code":"plot_sum_stats(summary_stats, title)"},{"path":"http://liu-chao.site/conversim/reference/plot_sum_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summary statistics for similarities — plot_sum_stats","text":"summary_stats data frame summary statistics dyad title string specifying plot title","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sum_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summary statistics for similarities — plot_sum_stats","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/plot_sum_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot summary statistics for similarities — plot_sum_stats","text":"","code":"similarities <- list(   \"1\" = c(0.5, 0.6, 0.7),   \"2\" = c(0.4, 0.5, 0.6) ) stats <- calc_sum_stats(similarities) plot_sum_stats(stats, \"Summary Statistics of Similarities\")"},{"path":"http://liu-chao.site/conversim/reference/preprocess_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess multiple dyad conversations — preprocess_dyads","title":"Preprocess multiple dyad conversations — preprocess_dyads","text":"function preprocesses conversations multiple dyads applying text cleaning utterance.","code":""},{"path":"http://liu-chao.site/conversim/reference/preprocess_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess multiple dyad conversations — preprocess_dyads","text":"","code":"preprocess_dyads(conversations)"},{"path":"http://liu-chao.site/conversim/reference/preprocess_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess multiple dyad conversations — preprocess_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'text'","code":""},{"path":"http://liu-chao.site/conversim/reference/preprocess_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess multiple dyad conversations — preprocess_dyads","text":"data frame additional 'processed_text' column, removing rows empty processed text","code":""},{"path":"http://liu-chao.site/conversim/reference/preprocess_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess multiple dyad conversations — preprocess_dyads","text":"","code":"convs <- data.frame(   dyad_id = c(1, 1, 2, 2),   speaker = c(\"A\", \"B\", \"C\", \"D\"),   text = c(\"Hello!\", \"Hi there!\", \"How are you?\", \"I'm fine, thanks!\") ) preprocess_dyads(convs) #>   dyad_id speaker              text processed_text #> 1       1       A            Hello!          hello #> 2       1       B         Hi there!       hi there #> 3       2       C      How are you?    how are you #> 4       2       D I'm fine, thanks! im fine thanks"},{"path":"http://liu-chao.site/conversim/reference/preprocess_text.html","id":null,"dir":"Reference","previous_headings":"","what":"This file contains core similarity calculation functions such as topic similarity, lexical similarity, semantic similarity, structural similarity, stylistic similarity, sentiment similarity, participant similarity, and timing similarity. — preprocess_text","title":"This file contains core similarity calculation functions such as topic similarity, lexical similarity, semantic similarity, structural similarity, stylistic similarity, sentiment similarity, participant similarity, and timing similarity. — preprocess_text","text":"Preprocess text analysis","code":""},{"path":"http://liu-chao.site/conversim/reference/preprocess_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This file contains core similarity calculation functions such as topic similarity, lexical similarity, semantic similarity, structural similarity, stylistic similarity, sentiment similarity, participant similarity, and timing similarity. — preprocess_text","text":"","code":"preprocess_text(text)"},{"path":"http://liu-chao.site/conversim/reference/preprocess_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This file contains core similarity calculation functions such as topic similarity, lexical similarity, semantic similarity, structural similarity, stylistic similarity, sentiment similarity, participant similarity, and timing similarity. — preprocess_text","text":"text character string preprocessed","code":""},{"path":"http://liu-chao.site/conversim/reference/preprocess_text.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This file contains core similarity calculation functions such as topic similarity, lexical similarity, semantic similarity, structural similarity, stylistic similarity, sentiment similarity, participant similarity, and timing similarity. — preprocess_text","text":"preprocessed character string","code":""},{"path":"http://liu-chao.site/conversim/reference/preprocess_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This file contains core similarity calculation functions such as topic similarity, lexical similarity, semantic similarity, structural similarity, stylistic similarity, sentiment similarity, participant similarity, and timing similarity. — preprocess_text","text":"function preprocesses input text converting lowercase, removing punctuation digits, trimming whitespace.","code":""},{"path":"http://liu-chao.site/conversim/reference/preprocess_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This file contains core similarity calculation functions such as topic similarity, lexical similarity, semantic similarity, structural similarity, stylistic similarity, sentiment similarity, participant similarity, and timing similarity. — preprocess_text","text":"","code":"text <- \"Hello, World! This is an example text (with 123 numbers).\" preprocess_text(text) #> [1] \"hello world this is an example text with numbers\""},{"path":"http://liu-chao.site/conversim/reference/print_sim_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Print similarity report — print_sim_report","title":"Print similarity report — print_sim_report","text":"function prints formatted summary similarity report.","code":""},{"path":"http://liu-chao.site/conversim/reference/print_sim_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print similarity report — print_sim_report","text":"","code":"print_sim_report(report)"},{"path":"http://liu-chao.site/conversim/reference/print_sim_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print similarity report — print_sim_report","text":"report similarity report generated gen_sim_report function","code":""},{"path":"http://liu-chao.site/conversim/reference/print_sim_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print similarity report — print_sim_report","text":"NULL (invisibly). function called side effect printing console.","code":""},{"path":"http://liu-chao.site/conversim/reference/print_sim_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print similarity report — print_sim_report","text":"","code":"speech1 <- \"This is the first speech. It talks about important topics.\" speech2 <- \"This is the second speech. It covers similar subjects.\" report <- gen_sim_report(speech1, speech2) print_sim_report(report) #> Similarity Report #> ================= #>  #> Individual Similarity Scores: #>   topic: 0.9944 #>   lexical: 0.3571 #>   semantic: 0.5000 #>   structural: 0.9655 #>   stylistic: 0.9328 #>   sentiment: 0.9187 #>  #> Combined Similarity Score: %.4f #>  0.7780978 #> Plots have been generated for overall similarities and stylistic features. #> Use 'report$similarity_plot' and 'report$stylistic_plot' to view them."},{"path":"http://liu-chao.site/conversim/reference/radar_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Radar Chart of Average Similarities — radar_sim","title":"Create Radar Chart of Average Similarities — radar_sim","text":"Create radar chart average similarities single dyad","code":""},{"path":"http://liu-chao.site/conversim/reference/radar_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Radar Chart of Average Similarities — radar_sim","text":"","code":"radar_sim(similarities, titles)"},{"path":"http://liu-chao.site/conversim/reference/radar_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Radar Chart of Average Similarities — radar_sim","text":"similarities list similarity measures single dyad titles character vector titles similarity measure","code":""},{"path":"http://liu-chao.site/conversim/reference/radar_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Radar Chart of Average Similarities — radar_sim","text":"ggplot object","code":""},{"path":"http://liu-chao.site/conversim/reference/radar_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Radar Chart of Average Similarities — radar_sim","text":"function creates radar chart average similarities multiple measures single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/radar_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Radar Chart of Average Similarities — radar_sim","text":"","code":"sim1 <- list(sequence = c(0.5, 0.6, 0.7, 0.6, 0.8), average = 0.64) sim2 <- list(sequence = c(0.4, 0.5, 0.6, 0.7, 0.7), average = 0.58) sim3 <- list(sequence = c(0.6, 0.7, 0.8, 0.7, 0.9), average = 0.74) sim4 <- list(sequence = c(0.3, 0.4, 0.5, 0.6, 0.6), average = 0.48) similarities <- list(sim1, sim2, sim3, sim4) titles <- c(\"Measure 1\", \"Measure 2\", \"Measure 3\", \"Measure 4\")  # Create radar chart radar <- radar_sim(similarities, titles) print(radar)"},{"path":"http://liu-chao.site/conversim/reference/run_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run package examples — run_example","title":"Run package examples — run_example","text":"Run package examples","code":""},{"path":"http://liu-chao.site/conversim/reference/run_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run package examples — run_example","text":"","code":"run_example(example_name)"},{"path":"http://liu-chao.site/conversim/reference/run_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run package examples — run_example","text":"example_name Name example file run","code":""},{"path":"http://liu-chao.site/conversim/reference/run_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run package examples — run_example","text":"return value, called side effects.","code":""},{"path":"http://liu-chao.site/conversim/reference/run_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run package examples — run_example","text":"","code":"if (FALSE) { # \\dontrun{ run_example(\"sequence_multidyads_examples.R\") run_example(\"main_functions_examples.R\") } # }"},{"path":"http://liu-chao.site/conversim/reference/sem_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate semantic similarity sequence for a single dyad — sem_sim_seq","title":"Calculate semantic similarity sequence for a single dyad — sem_sim_seq","text":"function calculates semantic similarity sequence conversation exchanges within single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/sem_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate semantic similarity sequence for a single dyad — sem_sim_seq","text":"","code":"sem_sim_seq(conversation, method = \"tfidf\", window_size = 3, ...)"},{"path":"http://liu-chao.site/conversim/reference/sem_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate semantic similarity sequence for a single dyad — sem_sim_seq","text":"conversation data frame representing conversation method character string specifying method use: \"tfidf\", \"word2vec\", \"glove\" window_size integer specifying size sliding window ... Additional arguments passed semantic_similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/sem_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate semantic similarity sequence for a single dyad — sem_sim_seq","text":"list containing sequence similarities average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/sem_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate semantic similarity sequence for a single dyad — sem_sim_seq","text":"","code":"conversation <- data.frame(   processed_text = c(\"The weather is nice\", \"It's a beautiful day\",                      \"The sun is shining\", \"Perfect day for a picnic\") ) result <- sem_sim_seq(conversation, method = \"tfidf\", window_size = 2) #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. print(result) #> $sequence #> [1] 0.5 0.5 #>  #> $average #> [1] 0.5 #>"},{"path":"http://liu-chao.site/conversim/reference/semantic_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate semantic similarity for multiple dyads — semantic_sim_dyads","title":"Calculate semantic similarity for multiple dyads — semantic_sim_dyads","text":"function calculates semantic similarity sequence conversation exchanges multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/semantic_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate semantic similarity for multiple dyads — semantic_sim_dyads","text":"","code":"semantic_sim_dyads(conversations, method = \"tfidf\", window_size = 3, ...)"},{"path":"http://liu-chao.site/conversim/reference/semantic_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate semantic similarity for multiple dyads — semantic_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text' method character string specifying method use: \"tfidf\", \"word2vec\", \"glove\" window_size integer specifying size sliding window ... Additional arguments passed semantic_similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/semantic_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate semantic similarity for multiple dyads — semantic_sim_dyads","text":"list containing sequence similarities dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/semantic_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate semantic similarity for multiple dyads — semantic_sim_dyads","text":"","code":"library(lme4) convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) semantic_sim_dyads(convs, method = \"tfidf\", window_size = 2) #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> Warning: Problem with Hessian check (infinite or missing values?) #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 0.5 0.5 0.5 #>  #> $similarities_by_dyad$`2` #> [1] 0.5 0.5 0.5 #>  #>  #> $overall_average #> (Intercept)  #>         0.5  #>"},{"path":"http://liu-chao.site/conversim/reference/semantic_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate semantic similarity between two conversations — semantic_similarity","title":"Calculate semantic similarity between two conversations — semantic_similarity","text":"function calculates semantic similarity two conversations using either TF-IDF, Word2Vec, GloVe embeddings approach.","code":""},{"path":"http://liu-chao.site/conversim/reference/semantic_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate semantic similarity between two conversations — semantic_similarity","text":"","code":"semantic_similarity(   conversation1,   conversation2,   method = \"tfidf\",   model_path = NULL,   dim = 100,   window = 5,   iter = 5 )"},{"path":"http://liu-chao.site/conversim/reference/semantic_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate semantic similarity between two conversations — semantic_similarity","text":"conversation1 character string representing first conversation conversation2 character string representing second conversation method character string specifying method use: \"tfidf\", \"word2vec\", \"glove\" model_path character string specifying path pre-trained GloVe file (required \"glove\" method) dim integer specifying dimensionality Word2Vec embeddings (default: 100) window integer specifying window size Word2Vec (default: 5) iter integer specifying number iterations Word2Vec (default: 5)","code":""},{"path":"http://liu-chao.site/conversim/reference/semantic_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate semantic similarity between two conversations — semantic_similarity","text":"numeric value representing semantic similarity (0 1)","code":""},{"path":"http://liu-chao.site/conversim/reference/semantic_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate semantic similarity between two conversations — semantic_similarity","text":"","code":"conv1 <- \"The quick brown fox jumps over the lazy dog\" conv2 <- \"A fast auburn canine leaps above an idle hound\" semantic_similarity(conv1, conv2, method = \"tfidf\") #> Warning: The 'tfidf' method may not provide highly meaningful results for short conversations or those with little vocabulary overlap. Consider using 'word2vec' or 'glove' methods for more robust results. #> [1] 0.5"},{"path":"http://liu-chao.site/conversim/reference/sent_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sentiment similarity sequence for a single dyad — sent_sim_seq","title":"Calculate sentiment similarity sequence for a single dyad — sent_sim_seq","text":"function calculates sentiment similarity sequence conversation exchanges within single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/sent_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sentiment similarity sequence for a single dyad — sent_sim_seq","text":"","code":"sent_sim_seq(conversation, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/sent_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sentiment similarity sequence for a single dyad — sent_sim_seq","text":"conversation data frame representing conversation window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/sent_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sentiment similarity sequence for a single dyad — sent_sim_seq","text":"list containing sequence similarities average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/sent_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sentiment similarity sequence for a single dyad — sent_sim_seq","text":"","code":"conversation <- data.frame(   processed_text = c(\"I love this movie!\", \"It's really amazing.\",                      \"The acting is superb.\", \"I couldn't agree more.\") ) result <- sent_sim_seq(conversation, window_size = 2) print(result) #> $sequence #> [1] 0.9687500 0.8575962 #>  #> $average #> [1] 0.9131731 #>"},{"path":"http://liu-chao.site/conversim/reference/sentiment_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sentiment similarity for multiple dyads — sentiment_sim_dyads","title":"Calculate sentiment similarity for multiple dyads — sentiment_sim_dyads","text":"function calculates sentiment similarity sequence conversation exchanges multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/sentiment_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sentiment similarity for multiple dyads — sentiment_sim_dyads","text":"","code":"sentiment_sim_dyads(conversations, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/sentiment_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sentiment similarity for multiple dyads — sentiment_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text' window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/sentiment_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sentiment similarity for multiple dyads — sentiment_sim_dyads","text":"list containing sequence similarities dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/sentiment_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sentiment similarity for multiple dyads — sentiment_sim_dyads","text":"","code":"library(lme4) convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) sentiment_sim_dyads(convs, window_size = 2) #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 0.9290064 0.9000000 0.9709936 #>  #> $similarities_by_dyad$`2` #> [1] 0.8052607 0.7763932 0.2800000 #>  #>  #> $overall_average #> (Intercept)  #>   0.7769423  #>"},{"path":"http://liu-chao.site/conversim/reference/sentiment_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate sentiment similarity between two conversations — sentiment_similarity","title":"Calculate sentiment similarity between two conversations — sentiment_similarity","text":"function calculates sentiment similarity two conversations using sentimentr package.","code":""},{"path":"http://liu-chao.site/conversim/reference/sentiment_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate sentiment similarity between two conversations — sentiment_similarity","text":"","code":"sentiment_similarity(conv1, conv2)"},{"path":"http://liu-chao.site/conversim/reference/sentiment_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate sentiment similarity between two conversations — sentiment_similarity","text":"conv1 character string representing first conversation conv2 character string representing second conversation","code":""},{"path":"http://liu-chao.site/conversim/reference/sentiment_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate sentiment similarity between two conversations — sentiment_similarity","text":"numeric value representing sentiment similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/sentiment_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate sentiment similarity between two conversations — sentiment_similarity","text":"","code":"conv1 <- \"I love this product! It's amazing and works great.\" conv2 <- \"This item is okay. It does the job but could be better.\" sentiment_similarity(conv1, conv2) #> [1] 0.9401321"},{"path":"http://liu-chao.site/conversim/reference/structural_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate structural similarity for multiple dyads — structural_sim_dyads","title":"Calculate structural similarity for multiple dyads — structural_sim_dyads","text":"function calculates extended measure structural similarity multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/structural_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate structural similarity for multiple dyads — structural_sim_dyads","text":"","code":"structural_sim_dyads(conversations)"},{"path":"http://liu-chao.site/conversim/reference/structural_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate structural similarity for multiple dyads — structural_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text'","code":""},{"path":"http://liu-chao.site/conversim/reference/structural_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate structural similarity for multiple dyads — structural_sim_dyads","text":"list containing structural similarity dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/structural_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate structural similarity for multiple dyads — structural_sim_dyads","text":"","code":"convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) structural_sim_dyads(convs) #> Warning: Only one observation per dyad. Using simple mean for overall average instead of multilevel modeling. #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 0.727249 #>  #> $similarities_by_dyad$`2` #> [1] 0.6743895 #>  #>  #> $overall_average #> [1] 0.7008192 #>"},{"path":"http://liu-chao.site/conversim/reference/structural_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate structural similarity between two conversations — structural_similarity","title":"Calculate structural similarity between two conversations — structural_similarity","text":"function calculates structural similarity two conversations based length average turn length.","code":""},{"path":"http://liu-chao.site/conversim/reference/structural_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate structural similarity between two conversations — structural_similarity","text":"","code":"structural_similarity(conv1, conv2)"},{"path":"http://liu-chao.site/conversim/reference/structural_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate structural similarity between two conversations — structural_similarity","text":"conv1 character vector representing first conversation conv2 character vector representing second conversation","code":""},{"path":"http://liu-chao.site/conversim/reference/structural_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate structural similarity between two conversations — structural_similarity","text":"numeric value representing structural similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/structural_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate structural similarity between two conversations — structural_similarity","text":"","code":"conv1 <- c(\"Hello\", \"Hi there\", \"How are you?\", \"I'm fine, thanks\") conv2 <- c(\"Good morning\", \"Hello\", \"Nice day, isn't it?\", \"Yes, indeed\") structural_similarity(conv1, conv2) #> [1] 0.9361702"},{"path":"http://liu-chao.site/conversim/reference/style_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stylistic similarity sequence for a single dyad — style_sim_seq","title":"Calculate stylistic similarity sequence for a single dyad — style_sim_seq","text":"function calculates stylistic similarity sequence conversation exchanges within single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/style_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stylistic similarity sequence for a single dyad — style_sim_seq","text":"","code":"style_sim_seq(conversation, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/style_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stylistic similarity sequence for a single dyad — style_sim_seq","text":"conversation data frame representing conversation window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/style_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stylistic similarity sequence for a single dyad — style_sim_seq","text":"list containing sequence similarities average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/style_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate stylistic similarity sequence for a single dyad — style_sim_seq","text":"","code":"conversation <- data.frame(   processed_text = c(\"How are you doing?\", \"I'm doing great, thanks!\",                      \"That's wonderful to hear.\", \"I'm glad you're doing well.\") ) result <- style_sim_seq(conversation, window_size = 2) print(result) #> $sequence #> [1] 1.0000000 0.8107496 #>  #> $average #> [1] 0.9053748 #>"},{"path":"http://liu-chao.site/conversim/reference/stylistic_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stylistic similarity for multiple dyads — stylistic_sim_dyads","title":"Calculate stylistic similarity for multiple dyads — stylistic_sim_dyads","text":"function calculates stylistic similarity sequence conversation exchanges multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/stylistic_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stylistic similarity for multiple dyads — stylistic_sim_dyads","text":"","code":"stylistic_sim_dyads(conversations, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/stylistic_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stylistic similarity for multiple dyads — stylistic_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text' window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/stylistic_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stylistic similarity for multiple dyads — stylistic_sim_dyads","text":"list containing sequence similarities dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/stylistic_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate stylistic similarity for multiple dyads — stylistic_sim_dyads","text":"","code":"convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) stylistic_sim_dyads(convs, window_size = 2) #> boundary (singular) fit: see help('isSingular') #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 0.7230209 1.0000000 0.7822529 #>  #> $similarities_by_dyad$`2` #> [1] 0.6058412 0.7322554 1.0000000 #>  #>  #> $overall_average #> (Intercept)  #>   0.8072284  #>"},{"path":"http://liu-chao.site/conversim/reference/stylistic_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate stylistic similarity between two conversations — stylistic_similarity","title":"Calculate stylistic similarity between two conversations — stylistic_similarity","text":"function calculates various stylistic features similarity two conversations.","code":""},{"path":"http://liu-chao.site/conversim/reference/stylistic_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate stylistic similarity between two conversations — stylistic_similarity","text":"","code":"stylistic_similarity(text1, text2)"},{"path":"http://liu-chao.site/conversim/reference/stylistic_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate stylistic similarity between two conversations — stylistic_similarity","text":"text1 character string representing first conversation text2 character string representing second conversation","code":""},{"path":"http://liu-chao.site/conversim/reference/stylistic_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate stylistic similarity between two conversations — stylistic_similarity","text":"list containing stylistic features similarity measures","code":""},{"path":"http://liu-chao.site/conversim/reference/stylistic_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate stylistic similarity between two conversations — stylistic_similarity","text":"","code":"text1 <- \"The quick brown fox jumps over the lazy dog. It's a sunny day.\" text2 <- \"A lazy cat sleeps on the warm windowsill. Birds chirp outside.\" stylistic_similarity(text1, text2) #> $text1_features #>                 ttr avg_sentence_length            fk_grade  #>           1.0000000           6.5000000           0.5603846  #>  #> $text2_features #>                 ttr avg_sentence_length            fk_grade  #>            1.000000            5.500000            4.791364  #>  #> $feature_differences #>                 ttr avg_sentence_length            fk_grade  #>            0.000000            1.000000            4.230979  #>  #> $overall_similarity #> [1] 0.6543704 #>  #> $cosine_similarity #> [1] 0.5680224 #>"},{"path":"http://liu-chao.site/conversim/reference/timing_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate timing similarity for multiple dyads — timing_sim_dyads","title":"Calculate timing similarity for multiple dyads — timing_sim_dyads","text":"function calculates extended measure timing similarity multiple dyads.","code":""},{"path":"http://liu-chao.site/conversim/reference/timing_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate timing similarity for multiple dyads — timing_sim_dyads","text":"","code":"timing_sim_dyads(conversations)"},{"path":"http://liu-chao.site/conversim/reference/timing_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate timing similarity for multiple dyads — timing_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text'","code":""},{"path":"http://liu-chao.site/conversim/reference/timing_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate timing similarity for multiple dyads — timing_sim_dyads","text":"list containing timing similarity dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/timing_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate timing similarity for multiple dyads — timing_sim_dyads","text":"","code":"convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) timing_sim_dyads(convs) #> Warning: Only one observation per dyad. Using simple mean for overall average instead of multilevel modeling. #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 0.3549114 #>  #> $similarities_by_dyad$`2` #> [1] 0.04770762 #>  #>  #> $overall_average #> [1] 0.2013095 #>"},{"path":"http://liu-chao.site/conversim/reference/topic_sim_dyads.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate topic similarity for multiple dyads — topic_sim_dyads","title":"Calculate topic similarity for multiple dyads — topic_sim_dyads","text":"function calculates topic similarity sequence conversation exchanges multiple dyads. uses Latent Dirichlet Allocation (LDA) method topic modeling \"slam\" package efficient handling sparse matrices.","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_sim_dyads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate topic similarity for multiple dyads — topic_sim_dyads","text":"","code":"topic_sim_dyads(conversations, method = \"lda\", num_topics = 2, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/topic_sim_dyads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate topic similarity for multiple dyads — topic_sim_dyads","text":"conversations data frame columns 'dyad_id', 'speaker', 'processed_text' method character string specifying method use: currently \"lda\" supported num_topics integer specifying number topics use LDA model window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_sim_dyads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate topic similarity for multiple dyads — topic_sim_dyads","text":"list containing sequence similarities dyad overall average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_sim_dyads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate topic similarity for multiple dyads — topic_sim_dyads","text":"","code":"convs <- data.frame(   dyad_id = c(1, 1, 1, 1, 2, 2, 2, 2),   speaker = c(\"A\", \"B\", \"A\", \"B\", \"C\", \"D\", \"C\", \"D\"),   processed_text = c(\"i love pizza\", \"me too favorite food\",                      \"whats your favorite topping\", \"enjoy pepperoni mushrooms\",                      \"i prefer pasta\", \"pasta delicious like spaghetti carbonara\",                      \"ever tried making home\", \"yes quite easy make\") ) topic_sim_dyads(convs, method = \"lda\", num_topics = 2, window_size = 2) #> $similarities_by_dyad #> $similarities_by_dyad$`1` #> [1] 0 0 0 #>  #> $similarities_by_dyad$`2` #> [1] 0 0 0 #>  #>  #> $overall_average #> (Intercept)  #>           0  #>"},{"path":"http://liu-chao.site/conversim/reference/topic_sim_seq.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate topic similarity sequence for a single dyad — topic_sim_seq","title":"Calculate topic similarity sequence for a single dyad — topic_sim_seq","text":"function calculates topic similarity sequence conversation exchanges within single dyad.","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_sim_seq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate topic similarity sequence for a single dyad — topic_sim_seq","text":"","code":"topic_sim_seq(conversation, method = \"lda\", num_topics = 2, window_size = 3)"},{"path":"http://liu-chao.site/conversim/reference/topic_sim_seq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate topic similarity sequence for a single dyad — topic_sim_seq","text":"conversation data frame representing conversation method character string specifying method use: \"lda\" \"lsa\" num_topics integer specifying number topics use model window_size integer specifying size sliding window","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_sim_seq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate topic similarity sequence for a single dyad — topic_sim_seq","text":"list containing sequence similarities average similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_sim_seq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate topic similarity sequence for a single dyad — topic_sim_seq","text":"","code":"conversation <- data.frame(   processed_text = c(\"The cat sat on the mat\", \"The dog chased the cat\",                      \"The mat was comfortable\", \"The cat liked the mat\") ) result <- topic_sim_seq(conversation, method = \"lda\", num_topics = 2, window_size = 2) print(result) #> $sequence #> [1] 1 1 1 #>  #> $average #> [1] 1 #>"},{"path":"http://liu-chao.site/conversim/reference/topic_similarity.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate topic similarity between two conversations — topic_similarity","title":"Calculate topic similarity between two conversations — topic_similarity","text":"function calculates topic similarity two conversations using either Latent Dirichlet Allocation (LDA) Latent Semantic Analysis (LSA).","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_similarity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate topic similarity between two conversations — topic_similarity","text":"","code":"topic_similarity(conv1, conv2, method = \"lda\", num_topics = 2)"},{"path":"http://liu-chao.site/conversim/reference/topic_similarity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate topic similarity between two conversations — topic_similarity","text":"conv1 character vector representing first conversation conv2 character vector representing second conversation method character string specifying method use: \"lda\" \"lsa\" num_topics integer specifying number topics use model","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_similarity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate topic similarity between two conversations — topic_similarity","text":"numeric value representing topic similarity","code":""},{"path":"http://liu-chao.site/conversim/reference/topic_similarity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate topic similarity between two conversations — topic_similarity","text":"","code":"conv1 <- c(\"I love pizza\", \"Pizza is my favorite food\") conv2 <- c(\"I prefer pasta\", \"Pasta is delicious\") topic_similarity(conv1, conv2, method = \"lda\", num_topics = 2) #> [1] 0.9995592 topic_similarity(conv1, conv2, method = \"lsa\", num_topics = 2) #>      [,1] #> [1,]    1"}]
